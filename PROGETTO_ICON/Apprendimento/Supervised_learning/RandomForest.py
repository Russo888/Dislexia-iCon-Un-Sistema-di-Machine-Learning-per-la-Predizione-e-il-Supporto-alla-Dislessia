# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12eMKUl03r3KesaaCxjqNaU8JNEVzFxCZ
"""

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import csv

from sklearn.model_selection import train_test_split
from collections import defaultdict
from sklearn.ensemble import RandomForestClassifier
from sklearn import metrics
from sklearn.preprocessing import StandardScaler

import xgboost as xgb
from sklearn import metrics
from sklearn.metrics import classification_report, confusion_matrix # Import classification_report and confusion_matrix

#tratamento de dados
#transformar as 4 colunas com string em numerico
def cleanData(data) :
    for col in data.columns.values:
        data[col] = data[col].astype('string')
    #----------
    for col in data.columns.values:
        data[col] = data[col].astype('float',errors = 'ignore')
    #-----------
    data['Gender']=data.Gender.map({'Male': 1, 'Female': 2})
    data['Dyslexia']=data.Dyslexia.map({'No': 0, 'Yes': 1})
    data['Nativelang']=data.Nativelang.map({'No': 0, 'Yes': 1})
    data['Otherlang']=data.Otherlang.map({'No': 0, 'Yes': 1})

desktopData= pd.read_csv("/content/Dyslexia_dataset.csv", sep = ';', encoding = 'utf-8')
cleanData(desktopData)

commonalityColumns = ['Gender','Nativelang','Otherlang','Age' , 'Dyslexia']
for i in  range(30):
    if((i>=0 and i<12) or (i>=13 and i<17) or i==21 or i==22 or i==29):
        commonalityColumns.append('Clicks'+str(i+1))
        commonalityColumns.append('Hits'+str(i+1))
        commonalityColumns.append('Misses'+str(i+1))
        commonalityColumns.append('Score'+str(i+1))
        commonalityColumns.append('Accuracy'+str(i+1))
        commonalityColumns.append('Missrate'+str(i+1))

desktopData=desktopData.loc[:,commonalityColumns]

y=desktopData['Dyslexia']
X=desktopData.loc[:, desktopData.columns != 'Dyslexia']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from imblearn.over_sampling import SMOTE

smote = SMOTE(sampling_strategy='auto', random_state=42)# Bilancia il dataset
X_train_sm, y_train_sm = SMOTE(random_state=42).fit_resample(X_train, y_train)
print("Class distribution after SMOTE:", y_train_sm.value_counts())

weights = {0: 1, 1: 6}  # Dai piÃ¹ peso alla classe 1 rispetto alla classe 0
rf_clf = RandomForestClassifier(
    n_estimators=200,
    max_depth=6,
    class_weight=weights,  # handle class imbalance
    random_state=42
)

rf_clf.fit(X_train, y_train)
y_pred_rf = rf_clf.predict(X_test)

print("Random Forest Classification Report:")
print(classification_report(y_test, y_pred_rf))
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred_rf))